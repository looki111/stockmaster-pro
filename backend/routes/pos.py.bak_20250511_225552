"""
POS Routes for StockMaster Pro
Handles POS mode API endpoints
"""

from flask import Blueprint, render_template, request, jsonify, redirect, url_for, flash
from flask_login import login_required, current_user
from database.models import Product, Client, Shift, Branch
from database.db_setup import db
from controllers import POSController
from auth import require_permission
from datetime import datetime, timezone
import json

pos_bp = Blueprint('pos', __name__, url_prefix='/pos')

@pos_bp.route('/')
@login_required
@require_permission('use_pos')
def index():
    """Render POS interface"""
    # Check if user has an active branch
    if not current_user.branch:
        flash('You need to be assigned to a branch to use POS', 'error')
        return redirect(url_for('dashboard'))

    # Check if there's an active shift
    active_shift = Shift.query.filter_by(
        branch_id=current_user.branch_id,
        status='active'
    ).first()

    if not active_shift and not current_user.has_permission('manage_shifts'):
        flash('There is no active shift. Please ask a manager to start a shift.', 'error')
        return redirect(url_for('dashboard'))

    # Render POS template
    return render_template('pos.html')

@pos_bp.route('/data')
@login_required
@require_permission('use_pos')
def get_pos_data():
    """Get all data needed for POS mode"""
    branch_id = current_user.branch_id
    if not branch_id:
        return jsonify({'error': 'No branch assigned'}), 400

    pos_data = POSController.get_pos_data(branch_id)
    return jsonify(pos_data)

@pos_bp.route('/products')
@login_required
@require_permission('use_pos')
def get_products():
    """Get products for POS"""
    branch_id = current_user.branch_id
    if not branch_id:
        return jsonify({'error': 'No branch assigned'}), 400

    # Get query parameters
    category = request.args.get('category')
    search = request.args.get('search')

    # Build query
    query = Product.query.filter_by(branch_id=branch_id, is_active=True)

    # Apply filters
    if category and category != 'all':
        query = query.filter_by(category=category)

    if search:
        query = query.filter(Product.name.ilike(f'%{search}%'))

    # Execute query
    products = query.all()

    # Format response
    result = [{
        'id': p.id,
        'name': p.name,
        'price': p.price,
        'category': p.category,
        'image': p.image,
        'description': p.description,
        'has_variants': bool(p.variants),
        'variants': p.variants,
        'in_stock': p.quantity > 0,
        'quantity': p.quantity
    } for p in products]

    return jsonify(result)

@pos_bp.route('/clients')
@login_required
@require_permission('use_pos')
def get_clients():
    """Get clients for POS"""
    branch_id = current_user.branch_id
    if not branch_id:
        return jsonify({'error': 'No branch assigned'}), 400

    # Get query parameters
    search = request.args.get('search')

    # Build query
    query = Client.query.filter_by(branch_id=branch_id)

    # Apply filters
    if search:
        query = query.filter(
            (Client.name.ilike(f'%{search}%')) |
            (Client.phone.ilike(f'%{search}%')) |
            (Client.email.ilike(f'%{search}%'))
        )

    # Execute query
    clients = query.order_by(Client.name).limit(20).all()

    # Format response
    result = [{
        'id': c.id,
        'name': c.name,
        'phone': c.phone,
        'email': c.email,
        'loyalty_points': c.loyalty_points
    } for c in clients]

    return jsonify(result)

@pos_bp.route('/client/<int:client_id>')
@login_required
@require_permission('use_pos')
def get_client(client_id):
    """Get client details for POS"""
    client_info = POSController.get_client_info(client_id)
    return jsonify(client_info)

@pos_bp.route('/client/add', methods=['POST'])
@login_required
@require_permission('use_pos')
def add_client():
    """Add a new client from POS"""
    try:
        data = request.json
        branch_id = current_user.branch_id

        # Create new client
        client = Client(
            name=data['name'],
            phone=data.get('phone'),
            email=data.get('email'),
            address=data.get('address'),
            branch_id=branch_id,
            notes=data.get('notes')
        )

        db.session.add(client)
        db.session.commit()

        return jsonify({
            'success': True,
            'client': {
                'id': client.id,
                'name': client.name,
                'phone': client.phone,
                'email': client.email,
                'loyalty_points': client.loyalty_points
            }
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 400

@pos_bp.route('/order', methods=['POST'])
@login_required
@require_permission('use_pos')
def create_order():
    """Create a new order from POS"""
    try:
        data = request.json
        result = POSController.create_order(data, current_user.id)
        return jsonify(result)
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400

@pos_bp.route('/shift/start', methods=['POST'])
@login_required
@require_permission('manage_shifts')
def start_shift():
    """Start a new shift"""
    try:
        data = request.json
        branch_id = current_user.branch_id

        # Check if there's already an active shift
        active_shift = Shift.query.filter_by(
            branch_id=branch_id,
            status='active'
        ).first()

        if active_shift:
            return jsonify({
                'success': False,
                'error': 'There is already an active shift'
            }), 400

        # Create new shift
        shift = Shift(
            branch_id=branch_id,
            user_id=current_user.id,
            start_time=datetime.now(timezone.utc),
            initial_cash=data.get('initial_cash', 0),
            status='active'
        )

        db.session.add(shift)
        db.session.commit()

        return jsonify({
            'success': True,
            'shift': {
                'id': shift.id,
                'start_time': shift.start_time.isoformat(),
                'initial_cash': shift.initial_cash
            }
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 400

@pos_bp.route('/shift/end', methods=['POST'])
@login_required
@require_permission('manage_shifts')
def end_shift():
    """End the current shift"""
    try:
        data = request.json
        branch_id = current_user.branch_id

        # Get active shift
        active_shift = Shift.query.filter_by(
            branch_id=branch_id,
            status='active'
        ).first()

        if not active_shift:
            return jsonify({
                'success': False,
                'error': 'There is no active shift'
            }), 400

        # Update shift
        active_shift.end_time = datetime.now(timezone.utc)
        active_shift.final_cash = data.get('final_cash', 0)
        active_shift.status = 'closed'
        active_shift.notes = data.get('notes')

        db.session.commit()

        return jsonify({
            'success': True,
            'shift': {
                'id': active_shift.id,
                'start_time': active_shift.start_time.isoformat(),
                'end_time': active_shift.end_time.isoformat(),
                'initial_cash': active_shift.initial_cash,
                'final_cash': active_shift.final_cash,
                'total_sales': active_shift.total_sales,
                'total_orders': active_shift.total_orders
            }
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 400
