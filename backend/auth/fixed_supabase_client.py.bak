"""
Supabase Client Module for StockMaster Pro

This module provides a client for interacting with Supabase with robust error handling.
"""

import os
import logging
import time
from typing import Dict, Any, Optional, Tuple, List, Union

from supabase import create_client, Client
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Supabase configuration
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')

# Check if environment variables are set
if not SUPABASE_URL or not SUPABASE_KEY:
    logger.error("SUPABASE_URL and SUPABASE_KEY must be set in environment variables")
    logger.error("Please check your .env file or environment configuration")

# Cache clients to avoid recreating them
supabase: Optional[Client] = None
supabase_admin: Optional[Client] = None
# Token refresh timestamp
_last_refresh_time = 0
# Refresh interval in seconds (10 minutes)
_REFRESH_INTERVAL = 600

def validate_supabase_config() -> bool:
    """
    Validate the Supabase configuration
    
    Returns:
        bool: Whether the configuration is valid
    """
    if not SUPABASE_URL:
        logger.error("SUPABASE_URL is not set in environment variables")
        return False
        
    if not SUPABASE_KEY:
        logger.error("SUPABASE_KEY is not set in environment variables")
        return False
    
    # Check for newlines or spaces in the key
    if '\n' in SUPABASE_KEY or ' ' in SUPABASE_KEY or '\r' in SUPABASE_KEY or '\t' in SUPABASE_KEY:
        logger.error("SUPABASE_KEY contains invalid characters (newlines, spaces, etc.)")
        return False
    
    # Check URL format
    if not SUPABASE_URL.startswith("https://") or not ".supabase.co" in SUPABASE_URL:
        logger.warning(f"SUPABASE_URL format looks unusual: {SUPABASE_URL}")
        # Not returning False as this might be a custom URL
    
    return True

def get_supabase_client(force_refresh=False) -> Client:
    """
    Get the regular Supabase client instance (using anon key).
    Initializes the client if it doesn't exist or if force_refresh is True.
    
    Args:
        force_refresh (bool): Whether to force a refresh of the client
        
    Returns:
        Client: The Supabase client
        
    Raises:
        ValueError: If the Supabase URL or Key is not set
        Exception: If there is an error initializing the client
    """
    global supabase, _last_refresh_time
    
    current_time = time.time()
    should_refresh = (
        force_refresh or 
        supabase is None or 
        (current_time - _last_refresh_time) > _REFRESH_INTERVAL
    )
    
    if should_refresh:
        if not validate_supabase_config():
            raise ValueError("Invalid Supabase configuration. Check logs for details.")
        
        try:
            logger.info(f"Initializing Supabase client with URL: {SUPABASE_URL}")
            supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
            _last_refresh_time = current_time
            logger.info("Supabase client initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing Supabase client: {e}")
            raise
    
    return supabase

def get_supabase_admin_client(force_refresh=False) -> Client:
    """
    Get the admin Supabase client instance (using service role key).
    Initializes the client if it doesn't exist or if force_refresh is True.
    
    Args:
        force_refresh (bool): Whether to force a refresh of the client
        
    Returns:
        Client: The Supabase admin client
        
    Raises:
        ValueError: If the Supabase URL or Service Role Key is not set
        Exception: If there is an error initializing the client
    """
    global supabase_admin, _last_refresh_time
    
    current_time = time.time()
    should_refresh = (
        force_refresh or 
        supabase_admin is None or 
        (current_time - _last_refresh_time) > _REFRESH_INTERVAL
    )
    
    if should_refresh:
        if not SUPABASE_URL or not SUPABASE_SERVICE_ROLE_KEY:
            raise ValueError("SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY must be set in environment variables")
        
        # Check for newlines or spaces in the key
        if '\n' in SUPABASE_SERVICE_ROLE_KEY or ' ' in SUPABASE_SERVICE_ROLE_KEY:
            logger.error("SUPABASE_SERVICE_ROLE_KEY contains newlines or spaces")
            raise ValueError("Invalid SUPABASE_SERVICE_ROLE_KEY format")
        
        try:
            logger.info(f"Initializing Supabase admin client with URL: {SUPABASE_URL}")
            supabase_admin = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
            _last_refresh_time = current_time
            logger.info("Supabase admin client initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing Supabase admin client: {e}")
            raise
    
    return supabase_admin

def test_supabase_connection() -> bool:
    """
    Test the Supabase connection
    
    Returns:
        bool: Whether the connection was successful
    """
    try:
        client = get_supabase_client()
        # Make a simple query to test the connection
        response = client.table('locations').select('id').limit(1).execute()
        logger.info("Supabase connection test successful")
        return True
    except Exception as e:
        logger.error(f"Supabase connection test failed: {e}")
        return False

# Rest of your client functions would go here...
