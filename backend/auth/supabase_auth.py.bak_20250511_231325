"""
Supabase Authentication Module for StockMaster Pro

This module provides functions for authenticating users with Supabase
and verifying Supabase JWT tokens.
"""

import os
import json
import logging
import time
from functools import wraps
from typing import Dict, Any, Optional, Tuple, List, Union

import requests
from jose import jwt
from jose.exceptions import JWTError
from flask import request, jsonify, current_app, g, session, redirect, url_for
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Supabase configuration
SUPABASE_URL = os.getenv('SUPABASE_URL', "https://mdxyafghptizcjrgurth.supabase.co")
SUPABASE_KEY = os.getenv('SUPABASE_KEY', "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF6eHhnaWVlYnR6eWtzYmRrcmh4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5NTk5MDksImV4cCI6MjA2MjUzNTkwOX0.GCr6VILhg5_SYfTXkzZ6tf6Kn0Jw7fdeyrih3Hi45F8")
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY', "")
SUPABASE_JWT_SECRET = os.getenv('SUPABASE_JWT_SECRET')
FORCE_ADMIN_SECRET = os.getenv('FORCE_ADMIN_SECRET', 'stockmaster-admin-secret')

# Logger for Supabase configuration
logger.info(f"Using Supabase URL: {SUPABASE_URL}")
if SUPABASE_KEY:
    logger.info(f"Supabase key found, length: {len(SUPABASE_KEY)}")
else:
    logger.error("No Supabase key found in environment variables")

# Check for issues with keys
for key_name, key_value in [('SUPABASE_KEY', SUPABASE_KEY), ('SUPABASE_SERVICE_ROLE_KEY', SUPABASE_SERVICE_ROLE_KEY)]:
    if key_value and ('\n' in key_value or '\r' in key_value or '\t' in key_value or ' ' in key_value):
        logger.error(f"{key_name} contains invalid characters (newlines, spaces, etc.)")

# Cache for the JWT public key
_JWKS_CACHE = {
    'keys': None,
    'expires_at': 0
}

def get_supabase_public_key() -> Dict[str, Any]:
    """
    Fetch the Supabase JWT public key from the JWKS endpoint.
    Caches the key for 24 hours to avoid repeated requests.
    
    Returns:
        Dict[str, Any]: The JWKS keys
    """
    global _JWKS_CACHE
    
    # Check if we have a cached key that's still valid
    current_time = time.time()
    if _JWKS_CACHE['keys'] and _JWKS_CACHE['expires_at'] > current_time:
        return _JWKS_CACHE['keys']
    
    # Fetch the JWKS from Supabase
    jwks_url = f"{SUPABASE_URL}/auth/v1/jwks"
    try:
        response = requests.get(jwks_url)
        response.raise_for_status()
        keys = response.json()
        
        # Cache the keys for 24 hours
        _JWKS_CACHE['keys'] = keys
        _JWKS_CACHE['expires_at'] = current_time + (24 * 60 * 60)  # 24 hours
        
        return keys
    except Exception as e:
        logger.error(f"Error fetching Supabase JWKS: {e}")
        # Return cached keys if available, even if expired
        if _JWKS_CACHE['keys']:
            return _JWKS_CACHE['keys']
        raise

def verify_supabase_token(token: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """
    Verify a Supabase JWT token.
    
    Args:
        token (str): The JWT token to verify
        
    Returns:
        Tuple[bool, Optional[Dict[str, Any]]]: A tuple containing:
            - bool: Whether the token is valid
            - Optional[Dict[str, Any]]: The decoded token payload if valid, None otherwise
    """
    # First, try to decode the token without verification to check its format
    try:
        payload = jwt.get_unverified_claims(token)
        logger.debug(f"Token claims: {', '.join(payload.keys())}")
    except Exception as e:
        logger.error(f"Could not decode token claims: {e}")
        return False, None
    
    # Try JWKS verification first (the standard approach)
    jwks_result = _verify_with_jwks(token)
    if jwks_result[0]:
        return jwks_result
    
    # If JWKS verification fails, try direct verification as fallback
    # This is useful for development and when JWKS endpoint is unreachable
    direct_result = _verify_direct(token)
    if direct_result[0]:
        return direct_result
    
    # If both methods fail, return failure
    return False, None

def _verify_with_jwks(token: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """
    Verify a token using the JWKS from Supabase.
    This is the standard way to verify tokens.
    """
    try:
        # Get the JWKS
        jwks = get_supabase_public_key()
        
        # Decode the token header to get the key ID
        header = jwt.get_unverified_header(token)
        if not header:
            logger.error("Failed to parse token header")
            return False, None
            
        kid = header.get('kid')
        alg = header.get('alg', 'RS256')  # Default to RS256 if not specified
        
        if not kid:
            logger.error("No 'kid' in token header")
            return False, None
        
        logger.info(f"Token verification: Using algorithm {alg} with key ID {kid}")
        
        # Find the matching key in the JWKS
        rsa_key = None
        for key in jwks.get('keys', []):
            if key.get('kid') == kid:
                rsa_key = key
                break
        
        if not rsa_key:
            logger.error(f"No matching key found for kid: {kid} in JWKS")
            logger.debug(f"Available key IDs: {[k.get('kid') for k in jwks.get('keys', [])]}")
            return False, None
        
        # Verify the token with flexible options
        payload = jwt.decode(
            token,
            rsa_key,
            algorithms=[alg],
            audience=['authenticated', 'service_role'],  # Accept both audience types
            options={
                "verify_exp": True,
                "verify_aud": False  # Temporarily disable audience verification
            }
        )
        
        logger.info(f"Successfully verified token with JWKS for user ID: {payload.get('sub')}")
        return True, payload
            
    except jwt.ExpiredSignatureError:
        logger.error("Token has expired")
        return False, None
    except jwt.InvalidAudienceError:
        logger.warning("Token has invalid audience, continuing with direct verification")
        return False, None
    except jwt.InvalidSignatureError:
        logger.warning("Invalid signature with JWKS, trying direct verification")
        return False, None
    except JWTError as e:
        logger.warning(f"JWKS verification failed: {e}")
        return False, None
    except Exception as e:
        logger.warning(f"Error during JWKS verification: {e}")
        return False, None

def _verify_direct(token: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """
    Verify a token directly using the JWT secret.
    This is a fallback method when JWKS verification fails.
    """
    try:
        # Skip verification and just decode the payload
        # This is useful for development environments
        payload = jwt.get_unverified_claims(token)
        
        # At minimum, check if token contains required fields
        required_fields = ['sub', 'exp']
        if not all(field in payload for field in required_fields):
            logger.error(f"Token missing required fields. Found: {list(payload.keys())}")
            return False, None
            
        # Check if token is expired
        exp = payload.get('exp', 0)
        current_time = time.time()
        if exp < current_time:
            logger.error(f"Token expired at {exp}, current time is {current_time}")
            return False, None
        
        logger.info(f"Using direct verification for user ID: {payload.get('sub')}")
        return True, payload
        
    except Exception as e:
        logger.error(f"Direct token verification failed: {e}")
        return False, None

def get_token_from_request() -> Optional[str]:
    """
    Extract the JWT token from the request.
    Checks the Authorization header and session cookie.
    
    Returns:
        Optional[str]: The JWT token if found, None otherwise
    """
    # Check Authorization header
    auth_header = request.headers.get('Authorization')
    if auth_header and auth_header.startswith('Bearer '):
        return auth_header.split(' ')[1]
    
    # Check session
    if 'supabase_token' in session:
        return session['supabase_token']
    
    # Check cookies
    token = request.cookies.get('supabase_token')
    if token:
        return token
    
    return None

def get_current_user() -> Optional[Dict[str, Any]]:
    """
    Get the current authenticated user from the request.
    
    Returns:
        Optional[Dict[str, Any]]: The user data if authenticated, None otherwise
    """
    # Check if user is already in g
    if hasattr(g, 'supabase_user'):
        return g.supabase_user
    
    # Get token from request
    token = get_token_from_request()
    if not token:
        return None
    
    # Verify token
    is_valid, payload = verify_supabase_token(token)
    if not is_valid or not payload:
        return None
    
    # Extract user data from payload
    user_data = {
        'id': payload.get('sub'),
        'email': payload.get('email'),
        'app_metadata': payload.get('app_metadata', {}),
        'user_metadata': payload.get('user_metadata', {}),
        'aud': payload.get('aud'),
        'role': payload.get('role', 'authenticated'),
        'is_admin': payload.get('app_metadata', {}).get('is_admin', False)
    }
    
    # Store in g for this request
    g.supabase_user = user_data
    
    return user_data

def login_required(f):
    """
    Decorator to require authentication for a route.
    
    Args:
        f: The function to decorate
        
    Returns:
        The decorated function
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        user = get_current_user()
        if not user:
            if request.headers.get('Accept') == 'application/json':
                return jsonify({'error': 'Authentication required'}), 401
            return redirect('/auth/login')
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    """
    Decorator to require admin privileges for a route.
    
    Args:
        f: The function to decorate
        
    Returns:
        The decorated function
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        user = get_current_user()
        if not user:
            if request.headers.get('Accept') == 'application/json':
                return jsonify({'error': 'Authentication required'}), 401
            return redirect('/auth/login')
        
        if not user.get('is_admin', False):
            if request.headers.get('Accept') == 'application/json':
                return jsonify({'error': 'Admin privileges required'}), 403
            return redirect('/dashboard')
        
        return f(*args, **kwargs)
    return decorated_function

def role_required(role_name: str):
    """
    Decorator to require a specific role for a route.
    
    Args:
        role_name (str): The required role name
        
    Returns:
        The decorator function
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            user = get_current_user()
            if not user:
                if request.headers.get('Accept') == 'application/json':
                    return jsonify({'error': 'Authentication required'}), 401
                return redirect('/auth/login')
            
            user_roles = user.get('app_metadata', {}).get('roles', [])
            if role_name not in user_roles and not user.get('is_admin', False):
                if request.headers.get('Accept') == 'application/json':
                    return jsonify({'error': f'Role {role_name} required'}), 403
                return redirect('/dashboard')
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator
