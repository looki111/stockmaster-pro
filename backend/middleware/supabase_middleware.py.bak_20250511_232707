"""
Supabase Middleware for StockMaster Pro

This middleware verifies Supabase JWT tokens and sets the current user in the request context.
"""

import logging
from flask import request, g, session, current_app, jsonify, redirect
import sys
import os

# Add the parent directory to sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from backend.auth.supabase_auth import get_token_from_request, verify_supabase_token

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def supabase_auth_middleware():
    """
    Middleware function to verify Supabase JWT tokens and set the current user in the request context.
    """
    def middleware():
        # Public routes that don't require authentication
        public_routes = [
            '/',
            '/auth/login',
            '/auth/register',
            '/auth/logout',
            '/auth/callback',
            '/auth/reset-password',
            '/auth/forgot-password',
            '/favicon.ico',
            '/static/',  # Add the static directory as a public route
            '/test/supabase',  # Add the test route as a public route
        ]
        
        # Skip for static files and public routes
        if any(request.path.startswith(route) for route in public_routes) or request.path.startswith('/static/'):
            logger.debug(f"Skipping auth middleware for public route: {request.path}")
            return None

        # Get token from request
        token = get_token_from_request()
        if not token:
            # No token, continue without setting user
            g.supabase_user = None
            
            # Check if this is an API route that should require authentication
            if request.path.startswith('/api/') and not request.path.startswith('/api/public/'):
                logger.warning(f"API request without authentication token: {request.path}")
                return jsonify({'error': 'Authentication required'}), 401
                
            # For web routes that require authentication, redirect to login
            if not request.is_xhr and not request.headers.get('Accept') == 'application/json':
                # Don't redirect if already on the login page to prevent loops
                if not request.path == '/auth/login' and not request.path.startswith('/auth/'):
                    logger.info(f"Unauthenticated access to {request.path}, redirecting to login")
                    return redirect('/auth/login')
            
            return None

        # Verify token
        is_valid, payload = verify_supabase_token(token)
        if not is_valid or not payload:
            # Invalid token, continue without setting user
            g.supabase_user = None
            
            # For API routes, return 401 Unauthorized
            if request.path.startswith('/api/'):
                logger.warning(f"API request with invalid token: {request.path}")
                return jsonify({'error': 'Invalid authentication token'}), 401
                
            # For web routes, redirect to login
            if not request.is_xhr and not request.headers.get('Accept') == 'application/json':
                # Don't redirect if already on the login page to prevent loops
                if not request.path == '/auth/login' and not request.path.startswith('/auth/'):
                    logger.info(f"Invalid token for {request.path}, redirecting to login")
                    return redirect('/auth/login')
            
            return None

        # Extract user data from payload
        user_data = {
            'id': payload.get('sub'),
            'email': payload.get('email'),
            'app_metadata': payload.get('app_metadata', {}),
            'user_metadata': payload.get('user_metadata', {}),
            'aud': payload.get('aud'),
            'role': payload.get('role', 'authenticated'),
            'is_admin': payload.get('app_metadata', {}).get('is_admin', False)
        }

        # Store in g for this request
        g.supabase_user = user_data
        
        # Add user_id to all logs for this request
        logger.info(f"Authenticated request from user {user_data['id']} to {request.path}")

        return None

    return middleware

def apply_supabase_middleware(app):
    """
    Apply Supabase middleware to the Flask app.

    Args:
        app: The Flask app
    """
    app.before_request(supabase_auth_middleware())

    # Add user to template context
    @app.context_processor
    def inject_user():
        user = getattr(g, 'supabase_user', None)
        return {'current_user': user}
